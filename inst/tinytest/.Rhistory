ecdf_temp(values_to_impute)
})
# bind rows into a matrix
y1_imp = as.matrix(do.call(rbind, y1_imp))
# aggregate all 2x2-Y(0) (weighted by cohort size)
test1 = data.frame(values_to_impute, value = colSums(y1_imp * (n1/sum(n1))) )
rm(y1_imp)
# get the quantiles of interest
y1_quant = do.call(rbind, lapply(myProbs, function(r) {
test1$diff = test1$value - r
test1 = subset(test1, diff >= 0)
test1[which.min(test1$diff),]
}))
y1_quant = y1_quant[, !(colnames(y1_quant) == "diff")]
rm(test1)
gc()
# compute the QTE
myQuant = data.frame(
perc = myProbs,
values = y1_quant$values_to_impute - y0_quant$values_to_impute # from CDFs
)
#-------------------------------------------------------------------------
} else { # "event study"
# impute Y(1)
y1_imp = lapply(y1, function(ecdf_temp) {
ecdf_temp(values_to_impute)
})
# check event study settings
name_runs$diff = name_runs$qteYear - name_runs$qteCohort
max_es = max(name_runs[["diff"]])
if (periods_es > max_es) {
periods_es = max_es
warning(paste0("Bootstrap run ", j, ": Only ", periods_es, " post-treatment periods can be calculated (plus contemporaneous)."))
}
myQuant = lapply(0:periods_es, function(e) { # time-after-treat
weights_temp = n1[subset(name_runs, diff == e)[["i"]]] # weights for this event time
y1_agg = colSums(
as.matrix(do.call(rbind, y1_imp[subset(name_runs, diff == e)[["i"]]]
)) * (weights_temp / sum(weights_temp)) )
test1 = data.frame(values_to_impute, value = y1_agg)
rm(y1_agg)
y1_quant = do.call(rbind, lapply(myProbs, function(r) {
test1$diff = test1$value - r
test1 = subset(test1, diff >= 0)
test1 = test1[which.min(test1$diff), ]
}))
y1_quant = y1_quant[, !(colnames(y1_quant) == "diff")]
# compute the QTE
quant_temp = data.frame(
perc = myProbs,
values = y1_quant$values_to_impute - y0_quant$values_to_impute # from CDFs
)
return(quant_temp)
})
rm(y1_imp)
gc()
}
#---------------------------------------------------------------------------
# save to disk (saver, but maybe slower)
if (save_to_disk == T) {
saveRDS(myQuant, file = paste0(getwd(), "/", myFolder, "/myQuant", j, ".rds"))
saveRDS(name_runs, file = paste0(getwd(), "/", myFolder, "/name_runs", j, ".rds"))
return(j)
}
# just work in the RAM (output lost if crash and RAM may be too small)
if (short_output == T & save_to_disk == F) {
return(list(coefs = myQuant, name_runs = name_runs))
}
if ((short_output == F & save_to_disk == F)) {
return(list(coefs = myQuant, n1 = n1, n0 = n0, name_runs = name_runs, y1 = y1, y0 = y0))
}
},
.options = furrr::furrr_options(seed = 123), .progress = T
)
##############################################################################
# post-loop: combine the outputs files
if(save_to_disk == T){
myRuns = lapply(1:nReps, function(j){
list(
coefs =  lapply(list.files( path = paste0(getwd(), "/", myFolder, "/"), pattern = paste0("myQuant", j, ".rds"), full.names = TRUE ), readRDS)[[1]],
name_runs =   lapply(list.files( path = paste0(getwd(), "/", myFolder, "/"), pattern = paste0("name_runs", j, ".rds"), full.names = TRUE ), readRDS)[[1]]
)})
}
# post-loop: Overload class and new attributes (for post-estimation) ----
if(es == T) {
periods_es = max(lengths(lapply(myRuns, "[[", 1))-1) # substact contemporary
} else {
periods_es = NA
}
class(myRuns) = c("ecic", class(myRuns))
attr(myRuns, "ecic") = list(
myProbs = myProbs,
es = es,
periods_es = periods_es
)
return(myRuns)
}
# average
myRuns <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = mpdta) # no se
##' Plot an extended changes-in-changes model
##'
##' @param object An `ecic` object.
##' @param es_type If an event study was estimated with `ecic`, you can choose the
##' styple of the ES plot. "aggregated" puts everything in one plot. "for_quantiles"
##' generates one plot for each percentile. "for_periods" generates one plot for each period.
##' @param perc_plot Which percentiles to plot.
##' @param periods_plot Which periods to plot.
##' @param xlab Alternative x-axis label
##' @param ylab Alternative y-axis label.
##' @param ylim Define the y-axis limits.
##' @param size Size of the point estimates.
##' @param zero_line Add a horizontal line at zero.
##' @param legend_title Change the title of the legend.
##' @return An `ggplot2` object.
##' @export
cic_plot <- function(object,
es_type = c("no", "aggregated", "for_quantiles", "for_periods"),
perc_plot = NULL,
periods_plot = NULL,
xlab = NULL,
ylab = "QTE \n",
ylim = NULL,
size = 2,
zero_line = F,
legend_title = "Percentiles") {
es_type    = match.arg(es_type)
es         = attributes(object)[["ecic_res"]][["es"]]
periods_es = attributes(object)[["ecic_res"]][["periods_es"]]
myProbs    = attributes(object)[["ecic_res"]][["myProbs"]]
perc = coefs = se = NULL
if (es_type == "no") es_type = NULL
if (is.null(perc_plot)) perc_plot = myProbs
if (!is.logical(zero_line)) stop("`zero_line` must be logical.\n")
if (class(object)[1] != "ecic_res") stop("`object` must be a ecic_res object. Run cic_summary first.\n")
if (!is.null(es_type) & (periods_es == 0 | is.na(periods_es))) warning("There is only one period. Average QTEs are plotted.\n")
# Plot the average QTE -------------------------------------------------------
if (es == F) {
if (is.null(xlab)) xlab = "\n Percentiles"
p = ggplot2::ggplot(
object,
ggplot2::aes(x = perc, y = coefs)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::geom_line(linetype = "dashed", color = "grey50") +
ggplot2::geom_point(size = size) +
ggplot2::coord_cartesian(ylim) +
ggplot2::theme_minimal() +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# Plot an event study for ALL percentiles jointly ----------------------------
} else if (es_type == "aggregated"){
if (is.null(xlab)) xlab <- "\n Months After Treatment"
myBoot_plot      = subset(do.call(rbind, object), perc %in% perc_plot)
myBoot_plot$es   = as.factor(myBoot_plot$es)
myBoot_plot$perc = as.factor(myBoot_plot$perc)
p = ggplot2::ggplot(
data = myBoot_plot,
ggplot2::aes(x = es, y = coefs, color = perc, group = perc)
) +
ggplot2::geom_line(position = ggplot2::position_dodge(width = 0.3), linetype = "dotted", linewidth = 1.3, alpha = .8) +
ggplot2::geom_point(size = size, position = ggplot2::position_dodge(width = 0.3)) +
ggplot2::geom_ribbon(position = ggplot2::position_dodge(width = 0.3), ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::theme_minimal() +
ggplot2::scale_color_viridis_d(option = "plasma", begin = .2, end = .8) +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab) +
ggplot2::labs(color = legend_title)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# plot every group individually ----
} else if (es_type == "for_quantiles"){
plot_title = "Decile "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Period"
plot_data  = subset(do.call(rbind, object), perc %in% perc_plot)
if(!is.null(perc_plot)) perc_plot = myProbs
for (i in 1:length(perc_plot)){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, perc == perc_plot[i]),
ggplot2::aes(x = es, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, perc_plot[i]*10))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in 1:length(myProbs)){
if (i == 1){
p = get("es1")
} else {
p = p + get(paste0("es", i))
}
}
p
# plot every period individually ----
} else if (es_type == "for_periods"){
plot_title = "Period "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Quantile"
plot_data  = subset(do.call(rbind, object), es %in% periods_plot)
myPeriods  =  0:periods_es
if(!is.null(periods_plot)) myPeriods = periods_plot
for (i in myPeriods){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, es == i),
ggplot2::aes(x = perc, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, i))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in myPeriods){
if (i == 0){
p = get("es0")
} else {
p = p + get(paste0("es", i))
}
}
p
}
}
# average
myRuns <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = mpdta) # no se
devtools::check("C:/Users/frkl.ECON/Documents/GitHub/ecic")
?is.empty
?is.empty
length(c(1, 2, 3, 5))
length(NULL)
length(is.logical(0))
qte_cohort
temp = is.logical(0)
temp
test = 1
test
test = test[-length(test)]
test
length(test)
devtools::check("C:/Users/frkl.ECON/Documents/GitHub/ecic")
devtools::check("C:/Users/frkl.ECON/Documents/GitHub/ecic")
devtools::check("C:/Users/frkl.ECON/Documents/GitHub/ecic")
remotes::install_github("frederickluser/ecic")
library(ecic)
?ecic
devtools::install("C:/Users/frkl.ECON/Documents/GitHub/ecic", upgrade = "never")
devtools::document("C:/Users/frkl.ECON/Documents/GitHub/ecic")
devtools::install("C:/Users/frkl.ECON/Documents/GitHub/ecic", upgrade = "never")
?ecic
?ecic_summary
?ecic_summary
remotes::install_github("frederickluser/ecic", force = T, upgrade = "never")
devtools::install("C:/Users/frkl.ECON/Documents/GitHub/ecic", upgrade = "never")
devtools::document("C:/Users/frkl.ECON/Documents/GitHub/ecic")
?cic_plot
?ecic
tinytest::setup_tinytest("pkgdir")
tinytest::setup_tinytest("C:/Users/frkl.ECON/Documents/GitHub/ecic")
data(dat, package = "ecic")
library(ecic)
bmod_known <-
# average
myRuns <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = mpdta) # no se
bmod_known <-
# average
myRuns <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat) # no se
myRuns
myRuns |> dput()
myRuns <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = mpdta, boot = NULL) # no se
myRuns <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat, boot = NULL) # no se
myRuns
myRuns <- ecic(yvar = "lemp", gvar = "first.treat", tvar = "year", ivar = "countyreal", dat = dat, boot = NULL) # no se
myRuns <- ecic(yvar = "lemp", gvar = "first.treat", tvar = "year", ivar = "countyreal", dat = dat, boot = "no") # no se
myRuns <- ecic(yvar = "lemp", gvar = "first.treat", tvar = "year", ivar = "countyreal", dat = dat, boot = "nso") # no se
myRuns <- ecic(yvar = "lemp", gvar = "first.treat", tvar = "year", ivar = "countyreal", dat = dat, boot = NULL) # no se
ecic2 <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal) # error
ecic3 <- ecic(yvar = lemp, gvar = first.tat, tvar = year, ivar = countyreal, dat = mpdta) # error
ecic3 <- ecic(yvar = lemp, gvar = first.tat, tvar = year, ivar = countyreal, dat = dat) # error
ecic4 <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat, nReps = 0) # error
ecic5 <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat, nReps = 100) # warning
ecic6 <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat, boot = "blaa") # error
ecic7 <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat, boot = "weighted")
ecic7
ecic7 |> dput()
ecic7 <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat, boot = "weighted")
ecic7 |> dput()
ecic8 <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat, boot = "normal")
ecic7 |> dput()
ecic8 |> dput()
devtools::check("C:/Users/frkl.ECON/Documents/GitHub/ecic", cran = T)
styler:::style_selection()
?usethis::use_data
getwd()
setwd("C:/Users/frkl.ECON/Documents/GitHub/ecic/inst/tinytest")
#data(dat, package = "ecic")
load("./../data/dat.rda")
getwd()
setwd("./../")
getwd()
setwd("C:/Users/frkl.ECON/Documents/GitHub/ecic/inst/tinytest")
load("./../../data/dat.rda")
devtools::check("C:/Users/frkl.ECON/Documents/GitHub/ecic", cran = T)
getwd()
load("./../../data/dat.rda")
dat
devtool::test("C:/Users/frkl.ECON/Documents/GitHub/ecic")
devtools::test("C:/Users/frkl.ECON/Documents/GitHub/ecic")
?devtools::test
tinytest::test_package("C:/Users/frkl.ECON/Documents/GitHub/ecic")
devtools::check("C:/Users/frkl.ECON/Documents/GitHub/ecic", cran = T)
devtools::check("C:/Users/frkl.ECON/Documents/GitHub/ecic", cran = T)
cic_summary(ecic1)
# tests ----
# average
# results from ecic(.) |> dput()
ecic1 <- ecic(yvar = lemp, gvar = first.treat, tvar = year, ivar = countyreal, dat = dat) # ngives o se
cic_summary(ecic1)
cic_summary(ecic1) |> dput()
ecic1
ecic1 %>% class()
# ES
es1 <- ecic(yvar = "lemp", gvar = "first.treat", tvar = "year", ivar = "countyreal", dat = dat,
boot = "weighted", nReps = 3, es = T)
es1 |> dput()
sum2 = cic_summary(es1)
sum2 |> dput()
styler:::style_selection()
devtools::document("C:/Users/frkl.ECON/Documents/GitHub/ecic")
tinytest::test_package("C:/Users/frkl.ECON/Documents/GitHub/ecic")
?test_package
tinytest::test_package("ecic")
tinytest::test_package("ecic")
devtools::install("C:/Users/frkl.ECON/Documents/GitHub/ecic", upgrade = "never")
tinytest::test_package("ecic") # first install !
cic_plot(sum2)
sum2
cic_plot(sum2)
cic_plot(sum2, es_type = "agg")
cic_plot(sum2, es_type = "agg") |> dput()
cic_plot(sum1)
# summary
sum1 <- cic_summary(ecic1)
cic_plot(sum1)
cic_plot(sum1) |> dput()
cic_plot(sum2)
##' @title Plot an extended changes-in-changes model
##' @param object An `ecic` object.
##' @param es_type If an event study was estimated with `ecic`, you can choose the
##' styple of the ES plot. "aggregated" puts everything in one plot. "for_quantiles"
##' generates one plot for each percentile. "for_periods" generates one plot for each period.
##' @param perc_plot Which percentiles to plot.
##' @param periods_plot Which periods to plot.
##' @param xlab Alternative x-axis label
##' @param ylab Alternative y-axis label.
##' @param ylim Define the y-axis limits.
##' @param size Size of the point estimates.
##' @param zero_line Add a horizontal line at zero.
##' @param legend_title Change the title of the legend.
##' @return An `ggplot2` object.
##' @importFrom stats sd
##' @export
cic_plot <- function(object,
es_type = c("aggregated", "for_quantiles", "for_periods"),
perc_plot = NULL,
periods_plot = NULL,
xlab = NULL,
ylab = "QTE \n",
ylim = NULL,
size = 2,
zero_line = F,
legend_title = "Percentiles") {
es_type    = match.arg(es_type)
es         = attributes(object)[["ecic_res"]][["es"]]
periods_es = attributes(object)[["ecic_res"]][["periods_es"]]
myProbs    = attributes(object)[["ecic_res"]][["myProbs"]]
perc = coefs = se = NULL
if (es == F) es_type = NULL
if (is.null(perc_plot)) perc_plot = myProbs
if (!is.logical(zero_line)) stop("`zero_line` must be logical.")
if (class(object)[1] != "ecic_res") stop("`object` must be a ecic_res object. Run cic_summary first.")
if (!is.null(es_type) & (periods_es == 0 | is.na(periods_es))) warning("There is only one period. Average QTEs are plotted.")
# Plot the average QTE -------------------------------------------------------
if (es == F) {
if (is.null(xlab)) xlab = "\n Percentiles"
p = ggplot2::ggplot(
object,
ggplot2::aes(x = perc, y = coefs)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::geom_line(linetype = "dashed", color = "grey50") +
ggplot2::geom_point(size = size) +
ggplot2::coord_cartesian(ylim) +
ggplot2::theme_minimal() +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# Plot an event study for ALL percentiles jointly ----------------------------
} else if (es_type == "aggregated"){
if (is.null(xlab)) xlab <- "\n Months After Treatment"
myBoot_plot      = subset(do.call(rbind, object), perc %in% perc_plot)
myBoot_plot$es   = as.factor(myBoot_plot$es)
myBoot_plot$perc = as.factor(myBoot_plot$perc)
p = ggplot2::ggplot(
data = myBoot_plot,
ggplot2::aes(x = es, y = coefs, color = perc, group = perc)
) +
ggplot2::geom_line(position = ggplot2::position_dodge(width = 0.3), linetype = "dotted", linewidth = 1.3, alpha = .8) +
ggplot2::geom_point(size = size, position = ggplot2::position_dodge(width = 0.3)) +
ggplot2::geom_ribbon(position = ggplot2::position_dodge(width = 0.3), ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::theme_minimal() +
ggplot2::scale_color_viridis_d(option = "plasma", begin = .2, end = .8) +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab) +
ggplot2::labs(color = legend_title)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# plot every group individually ----
} else if (es_type == "for_quantiles"){
plot_title = "Decile "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Period"
plot_data  = subset(do.call(rbind, object), perc %in% perc_plot)
if(is.null(perc_plot)) perc_plot = myProbs
for (i in 1:length(perc_plot)){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, perc == perc_plot[i]),
ggplot2::aes(x = es, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim = ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, perc_plot[i]*10))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in 1:length(perc_plot)){
if (i == 1){
p = get("es1")
} else {
p = p + get(paste0("es", i))
}
}
p
# plot every period individually ----
} else if (es_type == "for_periods"){
plot_title = "Period "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Quantile"
plot_data  = subset(do.call(rbind, object), es %in% periods_plot)
myPeriods  =  0:periods_es
if(!is.null(periods_plot)) myPeriods = periods_plot
for (i in myPeriods){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, es == i),
ggplot2::aes(x = perc, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim = ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, i))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in myPeriods){
if (i == 0){
p = get("es0")
} else {
p = p + get(paste0("es", i))
}
}
p
}
}
cic_plot(sum2)
sum2
cic_plot(sum2)
cic_plot(sum2) |> dput()
cic_plot(sum1) |> dput()
styler:::style_selection()
devtools::document("C:/Users/frkl.ECON/Documents/GitHub/ecic")
devtools::install("C:/Users/frkl.ECON/Documents/GitHub/ecic", upgrade = "never")
detach("package:ecic", unload = TRUE)
devtools::install("C:/Users/frkl.ECON/Documents/GitHub/ecic", upgrade = "never")
detach("package:ecic", unload = TRUE)
devtools::document("C:/Users/frkl.ECON/Documents/GitHub/ecic")
devtools::install("C:/Users/frkl.ECON/Documents/GitHub/ecic", upgrade = "never")
