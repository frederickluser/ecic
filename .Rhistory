}
}
#########################################################
source("C:/Users/frkl.ECON/Documents/GitHub/ecic/R/ecic.r")
source("C:/Users/frkl.ECON/Documents/GitHub/ecic/R/plot_ecic.R")
source("C:/Users/frkl.ECON/Documents/GitHub/ecic/R/summary_ecic.R")
# ES
myRuns <- ecic(yvar = "lemp", gvar = "first.treat", tvar = "year", ivar = "countyreal", dat = mpdta,
boot = "weighted", nReps = 3, es = T)
mpdta = simulation6(n = 10000, t = 6) %>% as_tibble() %>%
rename(lemp = y, first.treat = cohort, countyreal = id) %>% print()
# install and load directly all the packages
library(data.table)
library(dplyr)
simulation6 <- function(n, t) {
dat <- CJ(id = 1:n, year = 1980:(1980+t-1))[
, time_fe       := rnorm(1, sd = .5), by = "year"][
, unit_fe       := rnorm(1, sd = .5), by = "id"][
, cohort        := sample((1980):(1980+t-1), 1), by = "id"][
, treat         := as.numeric(year >= cohort)][
, hat_gamma     := sample(c(.5, .8, 1, 1.2, 1.5), 1), by = "cohort"][# add cohort hetero
, gamma         := rnorm(.N, mean = hat_gamma, sd = .3)][# add some variation
, tau           := fifelse(treat == 1, gamma, 0)][
, cumtau        := cumsum(tau), by = "id"][ # add period hetero
, error         := rnorm(.N, 0, .3)][
, y             := unit_fe + time_fe + cumtau + error][
, time_to_treat := year - cohort]
setkey(dat, cohort, id, year)
return(dat)
}
mpdta = simulation6(n = 10000, t = 6) %>% as_tibble() %>%
rename(lemp = y, first.treat = cohort, countyreal = id) %>% print()
# ES
myRuns <- ecic(yvar = "lemp", gvar = "first.treat", tvar = "year", ivar = "countyreal", dat = mpdta,
boot = "weighted", nReps = 3, es = T)
myBoot <- summary_ecic(myRuns)
plot_ecic(myBoot, perc_plot = c(.1, .5, .9), es_type = "for_q", ylim = c(0, 4), zero_line = T)
plot_ecic(myBoot, perc_plot = c(.1, .5, .9), periods_plot = c(0, 2), es_type = "agg")
plot_ecic(myBoot, periods_plot = c(0, 2), es_type = "for_p", ylim = c(.5, 4))
p1 = ggplot()
p2 = ggplot2::ggplot()
p1 = ggplot2::ggplot()
patchwork::wrap_plots(p1, p2)
patchwork::wrap_plots(list(c(p1, p2)))
patchwork::wrap_plots(list(p1, p2))
mylist = p1
mylist
mylist = append(mylinst, p2)
mylist = append(mylist, p2)
mylist
patchwork::wrap_plots(mylist)
mylist = list(p1)
mylist[2] = p2
mylist
mylist[[2]] = p2
mylist
patchwork::wrap_plots(mylist)
length(mylist)
?length
##' @title Plot an extended changes-in-changes model
##' @param object An `ecic` object.
##' @param es_type If an event study was estimated with `ecic`, you can choose the
##' styple of the ES plot. "aggregated" puts everything in one plot. "for_quantiles"
##' generates one plot for each percentile. "for_periods" generates one plot for each period.
##' @param perc_plot Which percentiles to plot.
##' @param periods_plot Which periods to plot.
##' @param xlab Alternative x-axis label
##' @param ylab Alternative y-axis label.
##' @param ylim Define the y-axis limits.
##' @param size Size of the point estimates.
##' @param zero_line Add a horizontal line at zero.
##' @param legend_title Change the title of the legend.
##' @return An `ggplot2` object.
##' @importFrom stats sd
##' @export
plot_ecic <- function(object,
es_type = c("aggregated", "for_quantiles", "for_periods"),
perc_plot = NULL,
periods_plot = NULL,
xlab = NULL,
ylab = "QTE \n",
ylim = NULL,
size = 2,
zero_line = F,
legend_title = "Percentiles") {
es_type    = match.arg(es_type)
es         = attributes(object)[["ecic_res"]][["es"]]
periods_es = attributes(object)[["ecic_res"]][["periods_es"]]
myProbs    = attributes(object)[["ecic_res"]][["myProbs"]]
perc = coefs = se = NULL
if (es == F) es_type = NULL
if (is.null(perc_plot)) perc_plot = myProbs
if (!is.logical(zero_line)) stop("`zero_line` must be logical.")
if (class(object)[1] != "ecic_res") stop("`object` must be a ecic_res object. Run cic_summary first.")
if (!is.null(es_type) & (periods_es == 0 | is.na(periods_es))) warning("There is only one period. Average QTEs are plotted.")
# Plot the average QTE -------------------------------------------------------
if (es == F) {
if (is.null(xlab)) xlab = "\n Percentiles"
p = ggplot2::ggplot(
object,
ggplot2::aes(x = perc, y = coefs)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::geom_line(linetype = "dashed", color = "grey50") +
ggplot2::geom_point(size = size) +
ggplot2::coord_cartesian(ylim) +
ggplot2::theme_minimal() +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# Plot an event study for ALL percentiles jointly ----------------------------
} else if (es_type == "aggregated"){
if (is.null(xlab)) xlab <- "\n Months After Treatment"
myBoot_plot      = subset(do.call(rbind, object), perc %in% perc_plot)
myBoot_plot$es   = as.factor(myBoot_plot$es)
myBoot_plot$perc = as.factor(myBoot_plot$perc)
p = ggplot2::ggplot(
data = myBoot_plot,
ggplot2::aes(x = es, y = coefs, color = perc, group = perc)
) +
ggplot2::geom_line(position = ggplot2::position_dodge(width = 0.3), linetype = "dotted", linewidth = 1.3, alpha = .8) +
ggplot2::geom_point(size = size, position = ggplot2::position_dodge(width = 0.3)) +
ggplot2::geom_ribbon(position = ggplot2::position_dodge(width = 0.3), ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::theme_minimal() +
ggplot2::scale_color_viridis_d(option = "plasma", begin = .2, end = .8) +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab) +
ggplot2::labs(color = legend_title)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# plot every group individually ----
} else if (es_type == "for_quantiles"){
plot_title = "Decile "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Period"
plot_data  = subset(do.call(rbind, object), perc %in% perc_plot)
if(is.null(perc_plot)) perc_plot = myProbs
for (i in 1:length(perc_plot)){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, perc == perc_plot[i]),
ggplot2::aes(x = es, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim = ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, perc_plot[i]*10))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in 1:length(perc_plot)){
if (i == 1){
p = get("es1")
} else {
p = p + get(paste0("es", i))
}
}
p
# plot every period individually ----
} else if (es_type == "for_periods"){
plot_title = "Period "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Quantile"
plot_data  = subset(do.call(rbind, object), es %in% periods_plot)
myPeriods  =  0:periods_es
if(!is.null(periods_plot)) myPeriods = periods_plot
for (i in myPeriods){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, es == i),
ggplot2::aes(x = perc, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim = ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, i))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in myPeriods){
if (i == 0){
p = list(get("es0"))
} else {
p[[length(p)+1]] = get(paste0("es", i)) )
p
mylist
##' @title Plot an extended changes-in-changes model
##' @param object An `ecic` object.
##' @param es_type If an event study was estimated with `ecic`, you can choose the
##' styple of the ES plot. "aggregated" puts everything in one plot. "for_quantiles"
##' generates one plot for each percentile. "for_periods" generates one plot for each period.
##' @param perc_plot Which percentiles to plot.
##' @param periods_plot Which periods to plot.
##' @param xlab Alternative x-axis label
##' @param ylab Alternative y-axis label.
##' @param ylim Define the y-axis limits.
##' @param size Size of the point estimates.
##' @param zero_line Add a horizontal line at zero.
##' @param legend_title Change the title of the legend.
##' @return An `ggplot2` object.
##' @importFrom stats sd
##' @export
plot_ecic <- function(object,
es_type = c("aggregated", "for_quantiles", "for_periods"),
perc_plot = NULL,
periods_plot = NULL,
xlab = NULL,
ylab = "QTE \n",
ylim = NULL,
size = 2,
zero_line = F,
legend_title = "Percentiles") {
es_type    = match.arg(es_type)
es         = attributes(object)[["ecic_res"]][["es"]]
periods_es = attributes(object)[["ecic_res"]][["periods_es"]]
myProbs    = attributes(object)[["ecic_res"]][["myProbs"]]
perc = coefs = se = NULL
if (es == F) es_type = NULL
if (is.null(perc_plot)) perc_plot = myProbs
if (!is.logical(zero_line)) stop("`zero_line` must be logical.")
if (class(object)[1] != "ecic_res") stop("`object` must be a ecic_res object. Run cic_summary first.")
if (!is.null(es_type) & (periods_es == 0 | is.na(periods_es))) warning("There is only one period. Average QTEs are plotted.")
# Plot the average QTE -------------------------------------------------------
if (es == F) {
if (is.null(xlab)) xlab = "\n Percentiles"
p = ggplot2::ggplot(
object,
ggplot2::aes(x = perc, y = coefs)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::geom_line(linetype = "dashed", color = "grey50") +
ggplot2::geom_point(size = size) +
ggplot2::coord_cartesian(ylim) +
ggplot2::theme_minimal() +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# Plot an event study for ALL percentiles jointly ----------------------------
} else if (es_type == "aggregated"){
if (is.null(xlab)) xlab <- "\n Months After Treatment"
myBoot_plot      = subset(do.call(rbind, object), perc %in% perc_plot)
myBoot_plot$es   = as.factor(myBoot_plot$es)
myBoot_plot$perc = as.factor(myBoot_plot$perc)
p = ggplot2::ggplot(
data = myBoot_plot,
ggplot2::aes(x = es, y = coefs, color = perc, group = perc)
) +
ggplot2::geom_line(position = ggplot2::position_dodge(width = 0.3), linetype = "dotted", linewidth = 1.3, alpha = .8) +
ggplot2::geom_point(size = size, position = ggplot2::position_dodge(width = 0.3)) +
ggplot2::geom_ribbon(position = ggplot2::position_dodge(width = 0.3), ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::theme_minimal() +
ggplot2::scale_color_viridis_d(option = "plasma", begin = .2, end = .8) +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab) +
ggplot2::labs(color = legend_title)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# plot every group individually ----
} else if (es_type == "for_quantiles"){
plot_title = "Decile "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Period"
plot_data  = subset(do.call(rbind, object), perc %in% perc_plot)
if(is.null(perc_plot)) perc_plot = myProbs
for (i in 1:length(perc_plot)){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, perc == perc_plot[i]),
ggplot2::aes(x = es, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim = ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, perc_plot[i]*10))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in 1:length(perc_plot)){
if (i == 1){
p = get("es1")
} else {
p = p + get(paste0("es", i))
}
}
p
# plot every period individually ----
} else if (es_type == "for_periods"){
plot_title = "Period "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Quantile"
plot_data  = subset(do.call(rbind, object), es %in% periods_plot)
myPeriods  =  0:periods_es
if(!is.null(periods_plot)) myPeriods = periods_plot
for (i in myPeriods){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, es == i),
ggplot2::aes(x = perc, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim = ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, i))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in myPeriods){
if (i == 0){
p = list(get("es0"))
} else {
p[[length(p)+1]] = get(paste0("es", i))
}
}
patchwork::wrap_plots(p)
}
}
plot_ecic(myBoot, periods_plot = c(0, 2), es_type = "for_p", ylim = c(.5, 4))
plot_ecic(myBoot, perc_plot = c(.1, .5, .9), es_type = "for_q", ylim = c(0, 4), zero_line = T)
##' @title Plot an extended changes-in-changes model
##' @param object An `ecic` object.
##' @param es_type If an event study was estimated with `ecic`, you can choose the
##' styple of the ES plot. "aggregated" puts everything in one plot. "for_quantiles"
##' generates one plot for each percentile. "for_periods" generates one plot for each period.
##' @param perc_plot Which percentiles to plot.
##' @param periods_plot Which periods to plot.
##' @param xlab Alternative x-axis label
##' @param ylab Alternative y-axis label.
##' @param ylim Define the y-axis limits.
##' @param size Size of the point estimates.
##' @param zero_line Add a horizontal line at zero.
##' @param legend_title Change the title of the legend.
##' @return An `ggplot2` object.
##' @importFrom stats sd
##' @export
plot_ecic <- function(object,
es_type = c("aggregated", "for_quantiles", "for_periods"),
perc_plot = NULL,
periods_plot = NULL,
xlab = NULL,
ylab = "QTE \n",
ylim = NULL,
size = 2,
zero_line = F,
legend_title = "Percentiles") {
es_type    = match.arg(es_type)
es         = attributes(object)[["ecic_res"]][["es"]]
periods_es = attributes(object)[["ecic_res"]][["periods_es"]]
myProbs    = attributes(object)[["ecic_res"]][["myProbs"]]
perc = coefs = se = NULL
if (es == F) es_type = NULL
if (is.null(perc_plot)) perc_plot = myProbs
if (!is.logical(zero_line)) stop("`zero_line` must be logical.")
if (class(object)[1] != "ecic_res") stop("`object` must be a ecic_res object. Run cic_summary first.")
if (!is.null(es_type) & (periods_es == 0 | is.na(periods_es))) warning("There is only one period. Average QTEs are plotted.")
# Plot the average QTE -------------------------------------------------------
if (es == F) {
if (is.null(xlab)) xlab = "\n Percentiles"
p = ggplot2::ggplot(
object,
ggplot2::aes(x = perc, y = coefs)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::geom_line(linetype = "dashed", color = "grey50") +
ggplot2::geom_point(size = size) +
ggplot2::coord_cartesian(ylim) +
ggplot2::theme_minimal() +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# Plot an event study for ALL percentiles jointly ----------------------------
} else if (es_type == "aggregated"){
if (is.null(xlab)) xlab <- "\n Months After Treatment"
myBoot_plot      = subset(do.call(rbind, object), perc %in% perc_plot)
myBoot_plot$es   = as.factor(myBoot_plot$es)
myBoot_plot$perc = as.factor(myBoot_plot$perc)
p = ggplot2::ggplot(
data = myBoot_plot,
ggplot2::aes(x = es, y = coefs, color = perc, group = perc)
) +
ggplot2::geom_line(position = ggplot2::position_dodge(width = 0.3), linetype = "dotted", linewidth = 1.3, alpha = .8) +
ggplot2::geom_point(size = size, position = ggplot2::position_dodge(width = 0.3)) +
ggplot2::geom_ribbon(position = ggplot2::position_dodge(width = 0.3), ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .15) +
ggplot2::theme_minimal() +
ggplot2::scale_color_viridis_d(option = "plasma", begin = .2, end = .8) +
ggplot2::xlab(xlab) +
ggplot2::ylab(ylab) +
ggplot2::labs(color = legend_title)
if (zero_line == T) p = p + ggplot2::geom_hline(yintercept = 0, col = "grey60")
p
# plot every group individually ----
} else if (es_type == "for_quantiles"){
plot_title = "Decile "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Period"
plot_data  = subset(do.call(rbind, object), perc %in% perc_plot)
if(is.null(perc_plot)) perc_plot = myProbs
for (i in 1:length(perc_plot)){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, perc == perc_plot[i]),
ggplot2::aes(x = es, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim = ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, perc_plot[i]*10))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in 1:length(perc_plot)){
if (i == 1){
p = list(get("es1"))
} else {
p[[length(p)+1]] = get(paste0("es", i))
}
}
patchwork::wrap_plots(p)
# plot every period individually ----
} else if (es_type == "for_periods"){
plot_title = "Period "
plot_ylab  = "QTE \n"
plot_xlab  = "\n Quantile"
plot_data  = subset(do.call(rbind, object), es %in% periods_plot)
myPeriods  =  0:periods_es
if(!is.null(periods_plot)) myPeriods = periods_plot
for (i in myPeriods){
assign(paste0("es", i),
ggplot2::ggplot(
subset(plot_data, es == i),
ggplot2::aes(x = perc, y = coefs, group = 1)
) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = coefs - 1.96 * se, ymax = coefs + 1.96 * se), alpha = .2, fill = "deepskyblue2") +
ggplot2::geom_line(linetype = "dotted", linewidth = 1.1, alpha = .8, color = "darkslateblue") +
ggplot2::geom_point(size = 4, color = "darkslateblue") +
ggplot2::theme_minimal() +
ggplot2::coord_cartesian(ylim = ylim) +
ggplot2::xlab(plot_xlab) +
ggplot2::ylab(plot_ylab) +
ggplot2::ggtitle(paste0(plot_title, i))
)
if (zero_line == T) assign(paste0("es", i), get(paste0("es", i)) + ggplot2::geom_hline(yintercept = 0, col = "grey60"))
}
for (i in myPeriods){
if (i == 0){
p = list(get("es0"))
} else {
p[[length(p)+1]] = get(paste0("es", i))
}
}
patchwork::wrap_plots(p)
}
}
plot_ecic(myBoot, periods_plot = c(0, 2), es_type = "for_p", ylim = c(.5, 4))
plot_ecic(myBoot, perc_plot = c(.1, .5, .9), es_type = "for_q", ylim = c(0, 4), zero_line = T)
id <- rstudioapi::terminalExecute("Rscript -e 'revdepcheck::revdep_check(num_workers = 4)'")
rstudioapi::terminalKill(id)
revdep_details(revdep = "pkg")
revdep_details(revdep = "pkg")
install.packages("badger")
$
library(badget)
library(badger)
?badger
?badge_codefactor
# set up stuff
rm(list = ls())
gc()
setwd("C:/Users/frkl.ECON/Documents/GitHub/ecic")
badge_codefactor()
getwd()
badge_codefactor("frederickluser/ecic")
badge_codefactor("frederickluser/ecic")
# Update dependencies in DESCRIPTION
attachment::att_amend_desc()
devtools::document()
# tests
rm(list = c("plot_ecic", "summary_ecic", "ecic"))
# Check package as CRAN
detach("package:ecic", unload = TRUE)
# Check package as CRAN
detach("package:ecic", unload = TRUE)
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
library(ecic)
remotes::install_github("frederickluser/ecic")
# Check package as CRAN
detach("package:ecic", unload = TRUE)
remotes::install_github("frederickluser/ecic")
library(ecic)
?ecic
