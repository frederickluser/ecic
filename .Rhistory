mutate(ci.low = ATT - 1.96*se, ci.high = ATT + 1.96*se)
seES %>% as.data.frame()
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean))
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2)
# true value
myTrue <- dat %>% left_join(treatProbs, by = c("cohort" = "group")) %>%
group_by(time_to_treat) %>% summarize(mean = weighted.mean(x = cumtau, w = share)) %>% arrange(desc(time_to_treat)) %>% dplyr::filter(time_to_treat %between% c(0, 17))
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean))
# TWFE
es <- aggte(csa, type = "dynamic", max_e = nPeriods)
es
# aggregate to ES
ju <- etwfe %>% dplyr::filter(e <= nPeriods) %>%
left_join(treatProbs, by = c("group")) %>% as_tibble() %>%
group_by(e) %>% summarize(ATT = weighted.mean(x = etwfe, w = share)) %>% ungroup() %>%
dplyr::select(e, ATT)
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean))
# calculate standard errors for ES: R * V * R
seES <- tibble(e = etwfe$e %>% unique(),
se = sapply(etwfe$e %>% unique(), function(i) {
juu <- etwfe %>% rownames_to_column() %>% dplyr::filter(e == i) %>% left_join(treatProbs, by = "group") %>%
mutate(share = share / sum(share), rowname = as.numeric(rowname))
t((juu %>% pull(share)))%*%V[juu %>% pull(rowname), juu %>% pull(rowname)]%*%(juu %>% pull(share)) %>% sqrt()
}))
# finish data set
seES %<>% left_join(ju, by = "e") %>%
mutate(ci.low = ATT - 1.96*se, ci.high = ATT + 1.96*se)
seES %>% as.data.frame()
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean))
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean), color = "red")
# plot it
coefplot(seES$ATT, sd = seES$se, x = seES$e)
seES
# plot it
coefplot(seES$ATT, sd = seES$se, x = seES$e)
# plot it
coefplot(seES$ATT, sd = seES$se, x = seES$e, ylim = c(0, 15))
# plot it
coefplot(seES$ATT, sd = seES$se, x = seES$e, ylim = c(0, 10))
seES
# plot it
coefplot(seES$ATT, sd = seES$se, x = seES$e)
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean), color = "red")
# true value
myTrue <- dat %>% left_join(treatProbs, by = c("cohort" = "group")) %>%
group_by(time_to_treat) %>% summarize(mean = weighted.mean(x = cumtau, w = share)) %>% arrange(desc(time_to_treat)) %>% dplyr::filter(time_to_treat %between% c(0, 17))
# TWFE
es <- aggte(csa, type = "dynamic", max_e = nPeriods)
es
ggdid(es)
# plot it
(results <- tibble(CS = es$att.egt[(length(es$att.egt)-nPeriods):length(es$att.egt)], Mundlak = ju$ATT[1:(nPeriods+1)], e = 0:nPeriods))
ggplot(results %>% pivot_longer(cols = c("CS", "Mundlak"), names_to = "Estimator", values_to = "ATT"), aes(x = e, y = ATT, color = Estimator)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean))
# plot it
(results <- tibble(CS = es$att.egt[(length(es$att.egt)-nPeriods):length(es$att.egt)], Mundlak = ju$ATT[1:(nPeriods+1)], e = 0:nPeriods))
ggplot(results %>% pivot_longer(cols = c("CS", "Mundlak"), names_to = "Estimator", values_to = "ATT"), aes(x = e, y = ATT, color = Estimator)) +
geom_line(lwd = 2) #+
ju
nPeriods
treatProbs
# aggregate to ES
ju <- etwfe %>% dplyr::filter(e <= nPeriods) %>%
left_join(treatProbs, by = c("group")) %>% as_tibble() %>%
group_by(e) %>% summarize(ATT = weighted.mean(x = etwfe, w = share)) %>% ungroup() %>%
dplyr::select(e, ATT)
ggplot(results %>% pivot_longer(cols = c("CS", "Mundlak"), names_to = "Estimator", values_to = "ATT"), aes(x = e, y = ATT, color = Estimator)) +
geom_line(lwd = 2) #+
#----------------------------------------------------------
# compare to CS
csa = att_gt(
yname = "y", allow_unbalanced_panel = T,
gname = "cohort",
idname = "firm",
tname = "year",
control_group = c("notyettreated"),
data = dat)
# TWFE
es <- aggte(csa, type = "dynamic", max_e = nPeriods)
es
# aggregate to ES
ju <- etwfe %>% dplyr::filter(e <= nPeriods) %>%
left_join(treatProbs, by = c("group")) %>% as_tibble() %>%
group_by(e) %>% summarize(ATT = weighted.mean(x = etwfe, w = share)) %>% ungroup() %>%
dplyr::select(e, ATT)
ggplot(results %>% pivot_longer(cols = c("CS", "Mundlak"), names_to = "Estimator", values_to = "ATT"), aes(x = e, y = ATT, color = Estimator)) +
geom_line(lwd = 2) #+
es
etwfe
# estimate group ATT (uses all pre-treatments together!)
(etwfe = feols(y ~ treat : factor(time_to_treat) : factor(cohort)  | firm + year,
data = dat))
# prepare data frame
etwfe = as.data.table(tidy(etwfe))
etwfe = etwfe[
, .(term = term, etwfe = estimate, std.error = std.error)][
, group := as.numeric(gsub(".*cohort.", "", term))][
, e1 := as.numeric(gsub(".*time_to_treat.(-\\d+).*", "\\1", term))][
, e2 := as.numeric(gsub(".*time_to_treat.(\\d+).*", "\\1", term))][
, year1 := as.numeric(gsub(".*time_to_treat.(-\\d+).*", "\\1", term)) + group][
, year2 := as.numeric(gsub(".*time_to_treat.(\\d+).*", "\\1", term)) + group][
, .(e1, e2, group, year1, year2, etwfe, std.error)]
etwfe %<>% mutate(e = pmax(e1, e2, na.rm = T), year = pmax(year1, year2, na.rm = T)) %>%
dplyr::select(-c(e1, e2, year1, year2))
etwfe %>% as.data.frame() %>% arrange(e)
# estimate group ATT (uses all pre-treatments together!)
(etwfe = feols(y ~ treat : factor(time_to_treat) : factor(cohort)  | firm + year,
data = dat %>% dplyr::filter(time_to_treat <= nPeriods)))
etwfe
# prepare data frame
etwfe = as.data.table(tidy(etwfe))
etwfe = etwfe[
, .(term = term, etwfe = estimate, std.error = std.error)][
, group := as.numeric(gsub(".*cohort.", "", term))][
, e1 := as.numeric(gsub(".*time_to_treat.(-\\d+).*", "\\1", term))][
, e2 := as.numeric(gsub(".*time_to_treat.(\\d+).*", "\\1", term))][
, year1 := as.numeric(gsub(".*time_to_treat.(-\\d+).*", "\\1", term)) + group][
, year2 := as.numeric(gsub(".*time_to_treat.(\\d+).*", "\\1", term)) + group][
, .(e1, e2, group, year1, year2, etwfe, std.error)]
etwfe %<>% mutate(e = pmax(e1, e2, na.rm = T), year = pmax(year1, year2, na.rm = T)) %>%
dplyr::select(-c(e1, e2, year1, year2))
etwfe %>% as.data.frame() %>% arrange(e)
# aggregate to ES
ju <- etwfe %>% dplyr::filter(e <= nPeriods) %>%
left_join(treatProbs, by = c("group")) %>% as_tibble() %>%
group_by(e) %>% summarize(ATT = weighted.mean(x = etwfe, w = share)) %>% ungroup() %>%
dplyr::select(e, ATT)
ggplot(results %>% pivot_longer(cols = c("CS", "Mundlak"), names_to = "Estimator", values_to = "ATT"), aes(x = e, y = ATT, color = Estimator)) +
geom_line(lwd = 2) #+
# plot it
(results <- tibble(CS = es$att.egt[(length(es$att.egt)-nPeriods):length(es$att.egt)], Mundlak = ju$ATT[1:(nPeriods+1)], e = 0:nPeriods))
ggplot(results %>% pivot_longer(cols = c("CS", "Mundlak"), names_to = "Estimator", values_to = "ATT"), aes(x = e, y = ATT, color = Estimator)) +
geom_line(lwd = 2) #+
simulation6 = function() {
dat = CJ(firm = 1:1000, year = 1980:2015)     [
, time_fe := rnorm(1, sd = .5), by = "year"][
, unit_fe := rnorm(1, sd = .5), by = "firm"][
, state := sample(1:50, 1), by = "firm"    ]
setkey(dat, state, firm, year)
treatment_groups = data.table(
state = c(1, 18, 35),
cohort = c(1989, 1998, 2007),
hat_gamma = c(.5, .3, .1))
dat = treatment_groups[dat, roll = TRUE, on = "state"]
dat                                                [
, treat  := as.numeric(year >= cohort)          ][
, gamma  := rnorm(.N, mean = hat_gamma, sd = .2)][
, tau    := fifelse(treat == 1, gamma, 0)       ][
, cumtau := cumsum(tau), by = "firm"            ][
, error  := rnorm(.N, 0, .5)                    ][
, yTrue := unit_fe + time_fe + cumtau           ][
, y := unit_fe + time_fe + cumtau + error       ][
, time_to_treat := year - cohort     ]
return(dat)
}
(dat = simulation6())
# estimate group ATT (uses all pre-treatments together!)
(etwfe = feols(y ~ treat : factor(time_to_treat) : factor(cohort)  | firm + year,
data = dat %>% dplyr::filter(time_to_treat <= nPeriods)))
coef <- etwfe$coefficients
V <- vcov(etwfe, cluster = "firm") %>% as.matrix()
# prepare data frame
etwfe = as.data.table(tidy(etwfe))
etwfe = etwfe[
, .(term = term, etwfe = estimate, std.error = std.error)][
, group := as.numeric(gsub(".*cohort.", "", term))][
, e1 := as.numeric(gsub(".*time_to_treat.(-\\d+).*", "\\1", term))][
, e2 := as.numeric(gsub(".*time_to_treat.(\\d+).*", "\\1", term))][
, year1 := as.numeric(gsub(".*time_to_treat.(-\\d+).*", "\\1", term)) + group][
, year2 := as.numeric(gsub(".*time_to_treat.(\\d+).*", "\\1", term)) + group][
, .(e1, e2, group, year1, year2, etwfe, std.error)]
etwfe %<>% mutate(e = pmax(e1, e2, na.rm = T), year = pmax(year1, year2, na.rm = T)) %>%
dplyr::select(-c(e1, e2, year1, year2))
etwfe %>% as.data.frame() %>% arrange(e)
#----------------------------------------------------------
# compare to CS
csa = att_gt(
yname = "y", allow_unbalanced_panel = T,
gname = "cohort",
idname = "firm",
tname = "year",
control_group = c("notyettreated"),
data = dat)
csa
#----------------------------------------------------------
# compare to CS
csa = att_gt(
yname = "y", allow_unbalanced_panel = T,
gname = "cohort",
idname = "firm",
tname = "year",
control_group = c("notyettreated"),
data = dat %>% dplyr::filter(time_to_treat <= 17))
csa
#----------------------------------------------------------
# all group ATTs
csaClean= data.table(group = csa$group, year = csa$t, csa = csa$att)
results = inner_join(etwfe %>% dplyr::select(-c(e, std.error)), csaClean, by = c("group", "year"))
results
colnames(results) = c("Cohort", "TWFE w/ interactions", "Year", "CSA (2021)")
results[, Cohort := factor(Cohort)]
results
dat_plot = melt(results, id.vars = c("Cohort", "Year"))
ggplot(dat_plot, aes(Year, value, color = variable, linetype = Cohort)) +
geom_line(size = 1.4) +
theme_minimal() +
labs(x = "Year", y = "ATT", color = "Estimator", linetype = "Cohort")
#----------------------------------------------------------
# Event Study
# weighting matrix for ES
nPeriods <- 17
treatProbs <- dat %>% count(cohort) %>% mutate(share = n / sum(n)) %>% dplyr::select(cohort, share) %>% rename(group = cohort)
treatProbs
# calculate standard errors for ES: R * V * R
seES <- tibble(e = etwfe$e %>% unique(),
se = sapply(etwfe$e %>% unique(), function(i) {
juu <- etwfe %>% rownames_to_column() %>% dplyr::filter(e == i) %>% left_join(treatProbs, by = "group") %>%
mutate(share = share / sum(share), rowname = as.numeric(rowname))
t((juu %>% pull(share)))%*%V[juu %>% pull(rowname), juu %>% pull(rowname)]%*%(juu %>% pull(share)) %>% sqrt()
}))
# finish data set
seES %<>% left_join(ju, by = "e") %>%
mutate(ci.low = ATT - 1.96*se, ci.high = ATT + 1.96*se)
seES %>% as.data.frame()
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean), color = "red")
# true value
myTrue <- dat %>% left_join(treatProbs, by = c("cohort" = "group")) %>%
group_by(time_to_treat) %>% summarize(mean = weighted.mean(x = cumtau, w = share)) %>% arrange(desc(time_to_treat)) %>% dplyr::filter(time_to_treat %between% c(0, 17))
# TWFE
es <- aggte(csa, type = "dynamic", max_e = nPeriods)
es
ggdid(es)
# aggregate to ES
ju <- etwfe %>% dplyr::filter(e <= nPeriods) %>%
left_join(treatProbs, by = c("group")) %>% as_tibble() %>%
group_by(e) %>% summarize(ATT = weighted.mean(x = etwfe, w = share)) %>% ungroup() %>%
dplyr::select(e, ATT)
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean), color = "red")
# plot it
(results <- tibble(CS = es$att.egt[(length(es$att.egt)-nPeriods):length(es$att.egt)], Mundlak = ju$ATT[1:(nPeriods+1)], e = 0:nPeriods))
ggplot(results %>% pivot_longer(cols = c("CS", "Mundlak"), names_to = "Estimator", values_to = "ATT"), aes(x = e, y = ATT, color = Estimator)) +
geom_line(lwd = 2) #+
ggplot(seES, aes(x = e, y = ATT)) +
geom_line(lwd = 2) +
geom_line(data = myTrue %>% mutate(Estimator = "True"), mapping = aes(x = time_to_treat, y = mean), color = "red")
# plot it
coefplot(seES$ATT, sd = seES$se, x = seES$e)
results
results = full_join(etwfe %>% dplyr::select(-c(e, std.error)), csaClean, by = c("group", "year"))
results
#----------------------------------------------------------
# compare to CS
csa = att_gt(
yname = "y", allow_unbalanced_panel = T,
gname = "cohort",
idname = "firm",
tname = "year",
control_group = c("notyettreated"),
data = dat)
csa
results
#----------------------------------------------------------
# all group ATTs
csaClean= data.table(group = csa$group, year = csa$t, csa = csa$att)
results = full_join(etwfe %>% dplyr::select(-c(e, std.error)), csaClean, by = c("group", "year"))
results
etwfe %>% dplyr::filter(e <= nPeriods) %>%
dplyr::filter(year == 1998 & group >= 2007)
etwfe %>% dplyr::filter(e <= nPeriods) %>%
dplyr::filter(!(year == 1998 & group >= 2007))
# aggregate to ES
ju <- etwfe %>% dplyr::filter(e <= nPeriods) %>%
dplyr::filter(!(year == 1998 & group >= 2007)) %>%
left_join(treatProbs, by = c("group")) %>% as_tibble() %>%
group_by(e) %>% summarize(ATT = weighted.mean(x = etwfe, w = share)) %>% ungroup() %>%
dplyr::select(e, ATT)
# plot it
(results <- tibble(CS = es$att.egt[(length(es$att.egt)-nPeriods):length(es$att.egt)], Mundlak = ju$ATT[1:(nPeriods+1)], e = 0:nPeriods))
ggplot(results %>% pivot_longer(cols = c("CS", "Mundlak"), names_to = "Estimator", values_to = "ATT"), aes(x = e, y = ATT, color = Estimator)) +
geom_line(lwd = 2) #+
etwfe %>% dplyr::filter(e <= nPeriods)
etwfe
treatProbs$share
##################################################################
# Overall ATT
att <- aggte(csa, type = "simple", max_e = nPeriods)
att
ju <- etwfe %>% dplyr::filter(e %between% c(0, nPeriods)) %>%
left_join(treatProbs, by = "group") %>% as_tibble() %>%
summarize(ATT = (weighted.mean(x = etwfe, w = share))) %>% ungroup()
ju
tibble(CS = att$overall.att, Mundlak = ju$ATT)
juu <- etwfe %>% left_join(treatProbs, by = "group") %>% mutate(share = share / sum(share)
juu <- etwfe %>% left_join(treatProbs, by = "group") %>% mutate(share = share / sum(share))
juu
t((juu %>% pull(share)))%*%V[juu %>% pull(rowname), juu %>% pull(rowname)]%*%(juu %>% pull(share)) %>% sqrt()
V
juu %>% pull(share))
dim(V)
dim(juu)
juu
t((juu %>% pull(share)))%*%V%*%(juu %>% pull(share)) %>% sqrt()
att
# SE
juu <- etwfe %>% left_join(treatProbs, by = "group") %>% mutate(share = share / sum(share))
t((juu %>% pull(share)))%*%V%*%(juu %>% pull(share)) %>% sqrt()
tibble(CS = att$overall.att, Mundlak = ju$ATT)
CS
att
ju
t((juu %>% pull(share)))%*%V%*%(juu %>% pull(share)) %>% sqrt()
mySe <- t((juu %>% pull(share)))%*%V%*%(juu %>% pull(share)) %>% sqrt()
tibble(est_cs = att$overall.att, est_mun = ju$ATT, se_cs = ju$ATT, se_Mun = mySe %>% as.numeric())
tibble(est_cs = att$overall.att, est_mun = ju$ATT, se_cs = att$overall.se, se_Mun = mySe %>% as.numeric())
etwfe
#---------------------------------------------------------------------------
# estimate group ATT (uses all pre-treatments together, ergo, no pre-treatment periods!)
(etwfe = feols(y ~ treat : factor(time_to_treat) : factor(cohort)  | firm + year,
data = dat %>% dplyr::filter(time_to_treat <= nPeriods)))
etwfe
dat
csa
#---------------------------------------------------------------------------
# estimate group ATT (uses all pre-treatments together, ergo, no pre-treatment periods!)
(etwfe = feols(y ~ treat : factor(time_to_treat) : factor(cohort)  | firm + year,
data = dat %>% dplyr::filter(time_to_treat <= nPeriods)))
# extract coefficients and variance
coef <- etwfe$coefficients
V <- vcov(etwfe, cluster = "firm") %>% as.matrix()
# prepare data frame
etwfe = as.data.table(tidy(etwfe))
etwfe = etwfe[
, .(term = term, etwfe = estimate, std.error = std.error)][
, group := as.numeric(gsub(".*cohort.", "", term))][
, e1 := as.numeric(gsub(".*time_to_treat.(-\\d+).*", "\\1", term))][
, e2 := as.numeric(gsub(".*time_to_treat.(\\d+).*", "\\1", term))][
, year1 := as.numeric(gsub(".*time_to_treat.(-\\d+).*", "\\1", term)) + group][
, year2 := as.numeric(gsub(".*time_to_treat.(\\d+).*", "\\1", term)) + group][
, .(e1, e2, group, year1, year2, etwfe, std.error)]
etwfe %<>% mutate(e = pmax(e1, e2, na.rm = T), year = pmax(year1, year2, na.rm = T)) %>%
dplyr::select(-c(e1, e2, year1, year2))
etwfe %>% as.data.frame() %>% arrange(e)
#----------------------------------------------------------
# compare to CS
csa = att_gt(
yname = "y", allow_unbalanced_panel = T,
gname = "cohort",
idname = "firm",
tname = "year",
control_group = c("notyettreated"),
data = dat)
csa
results = full_join(etwfe %>% dplyr::select(-c(e, std.error)), csaClean, by = c("group", "year"))
results
colnames(results) = c("Cohort", "TWFE w/ interactions", "Year", "CSA (2021)")
#----------------------------------------------------------
# all group ATTs
csaClean= data.table(group = csa$group, year = csa$t, csa = csa$att)
results[, Cohort := factor(Cohort)]
results
#-------------------------------------------------------------------------------
# Packages and Functions (DO NOT CHANGE)
#-------------------------------------------------------------------------------
# load package manager
if (!require("pacman")) install.packages("pacman")
library("pacman")
# load all packages
pacman::p_load(update = F,
clipr, here, rnaturalearth, tidyverse, rgeos, sp, sf, foreach, parallel, doParallel, raster, httr,
jsonlite, fasterize, scales, geojsonsf, RColorBrewer, tictoc, rgdal, snow, scriptName, dtplyr, readxl,
plm, sandwich, lmtest, RCurl, stargazer, spatialEco, lfe, haven, ggspatial, ggrepel, viridis, readr, foreign,
xtable, fixest, magrittr, rvest, xml2, rstudioapi, rstudioapi, cowplot, rmarkdown, extrafont, fst, qs,
data.table, did, multidplyr, tsibble, marginaleffects, finalfit, Rfast,tikzDevice, staggered, HonestDiD, pretrends)
setwd("~/OneDrive - Universitaet Bern")
publicTime <- read_fst("publicTime14.fst")
publicTime
################################################################################
# settings
pat <- "^.*rawtime.*?([0-9]+).*"
pat2 <- "^.*rawdistance.*?([0-9]+).*"
myMode <- "car" # or bicycle, oev, pedestrian
#fileName <- "cumCompetitor_REST_after_4"
fileName <- "cumStore"
# list that catches failed indices
(myRes <- tibble(i = integer(), myDist = double(), myKM = double()))
tic("One run")
# run the scraping
for(i in 1:dim(publicTime)[1]){
url <- paste0(
"https://map.search.ch/api/extroute.json?",
"from=", publicTime$x_K[i], ",", publicTime$y_K[i], "&",
"to=", publicTime$x_L[i], ",", publicTime$y_L[i], "&",
"date=28.09.2021&time=6:00&",
"mode=", myMode)
# print progress
if(mod(i, 500) == 0){
cat(paste0("\n", i, " / ", dim(publicTime)[1], " (", round(i/dim(publicTime)[1]*100, 3), "%) \n"))
print(url)}
# Scrape the data and catch errors
delayedAssign("do.next", {next})
webpage <- tryCatch(read_html(httr::RETRY("GET", url, times = 1)),
error=function(e) {
print(paste0("ERROR at line: ", i))
print(url)
force(do.next)})
# print scraped trip
if(mod(i, 500) == 0){
print(webpage)}
# extract the distance measures (in min and km)
myRes %<>% dplyr::add_row(i, myDist = as.integer(gsub(pat, "\\1", webpage))/60, myKM = as.integer(gsub(pat2, "\\1", webpage))/1000)
}
toc()
publicTime
# run the scraping
for(i in 1:dim(publicTime)[1]){
url <- paste0(
"https://map.search.ch/api/extroute.json?",
"from=", publicTime$x_K[i], ",", publicTime$y_K[i], "&",
"to=", publicTime$x_L[i], ",", publicTime$y_L[i], "&",
"date=28.09.2021&time=6:00&",
"mode=", myMode)
# print progress
if(mod(i, 500) == 0){
cat(paste0("\n", i, " / ", dim(publicTime)[1], " (", round(i/dim(publicTime)[1]*100, 3), "%) \n"))
print(url)}
# Scrape the data and catch errors
delayedAssign("do.next", {next})
webpage <- tryCatch(read_html(httr::RETRY("GET", url, times = 1)),
error=function(e) {
print(paste0("ERROR at line: ", i))
print(url)
force(do.next)})
# print scraped trip
if(mod(i, 500) == 0){
print(webpage)}
# extract the distance measures (in min and km)
myRes %<>% dplyr::add_row(i, myDist = as.integer(gsub(pat, "\\1", webpage))/60, myKM = as.integer(gsub(pat2, "\\1", webpage))/1000)
}
myRes2 <- myRes
publicTime2 <- publicTime
setwd("~/OneDrive - Universitaet Bern")
myRes2 <- myRes
publicTime2 <- publicTime
setwd("~/OneDrive - Universitaet Bern")
write_fst(publicTime2, "publicTime14.fst")
write_fst(myRes2, "myRes14.fst")
write_fst(publicTime2, "publicTime14.fst")
write_fst(myRes2, "myRes14.fst")
myRes
# set up stuff
rm(list = ls())
gc()
setwd("C:/Users/frkl.ECON/Documents/GitHub/ecic")
# Update dependencies in DESCRIPTION
attachment::att_amend_desc()
devtools::document()
rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"))
# check on other distributions
devtools::check_win_devel() # the win-builder tool
rhub::check_for_cran() # rhub check for cran
rhub::check_for_cran() # rhub check for cran
rhub::check_on_windows(check_args = "--force-multiarch")
rhub::check_on_solaris()
# Mac
devtools::build()
?release
setwd("C:/Users/frkl.ECON/Documents/GitHub/ecic")
# Verify you're ready for release, and release
devtools::release()
# Add news
devtools::install_github("Dschaykib/newsmd")
# Add news
library(newsmd)
my_news = news$new()
my_news
newsmd()
?newsmd
my_news$add_subtitle("Initial Submission")
my_news$add_bullet(c("This is the initial version submitted to CRAN."))
my_news$get_text()
print(my_news)
#my_news =  newsmd()
my_news$add_version("0.0.1")
# Verify you're ready for release, and release
devtools::release()
print(my_news)
#my_news =  newsmd()
my_news$add_version("0.0.1")
my_news$add_subtitle("Initial Submission")
my_news$add_bullet(c("This is the initial version submitted to CRAN."))
print(my_news)
my_news$write()
# Verify you're ready for release, and release
devtools::release()
